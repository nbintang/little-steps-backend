// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  ADMIN
}

enum ContentType {
  ARTICLE
  VIDEO
  GAME
  QUIZ
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique @db.VarChar(255)
  password   String
  provider   AuthProvider @default(LOCAL)
  providerId String?     @map("provider_id")
  role       UserRole    @default(PARENT)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")

  profile       Profile?
  childProfiles ChildProfile[]
  contents      Content[]
  quizzes       Quiz[]
  userBadges    UserBadge[]
  forumThreads  ForumThread[]
  forumPosts    ForumPost[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  fullName  String?  @map("full_name")
  phone     String?
  address   String?
  bio       String?
  avatarUrl String?  @map("avatar_url")
  birthDate DateTime? @map("birth_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model ChildProfile {
  id        String   @id @default(uuid())
  parentId  String   @map("parent_id")
  name      String
  birthDate DateTime? @map("birth_date")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  parent    User                       @relation(fields: [parentId], references: [id], onDelete: Cascade)
  schedules ParentalControlSchedule[]
  progress  Progress[]

  @@map("child_profiles")
}

model ParentalControlSchedule {
  id        String    @id @default(uuid())
  childId   String    @map("child_id")
  day       DayOfWeek
  startTime DateTime  @db.Time @map("start_time")
  endTime   DateTime  @db.Time @map("end_time")
  timezone  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  child ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("parental_control_schedule")
}

model Content {
  id            String       @id @default(uuid())
  title         String
  type          ContentType
  body          String?
  url           String?
  targetAgeMin  Int?         @map("target_age_min")
  targetAgeMax  Int?         @map("target_age_max")
  createdBy     String       @map("created_by")
  isPublished   Boolean      @default(false) @map("is_published")
  isDeleted     Boolean      @default(false) @map("is_deleted")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")

  author   User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("contents")
}

model Quiz {
  id           String    @id @default(uuid())
  title        String
  description  String?
  targetAgeMin Int?      @map("target_age_min")
  targetAgeMax Int?      @map("target_age_max")
  createdBy    String    @map("created_by")
  isDeleted    Boolean   @default(false) @map("is_deleted")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")

  author    User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  questions Question[]
  progress  Progress[]

  @@map("quizzes")
}

model Question {
  id        String    @id @default(uuid())
  quizId    String    @map("quiz_id")
  text      String
  isDeleted Boolean   @default(false) @map("is_deleted")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  quiz    Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  text       String
  isCorrect  Boolean  @default(false) @map("is_correct")
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Progress {
  id                String    @id @default(uuid())
  childId           String    @map("child_id")
  contentId         String?   @map("content_id")
  quizId            String?   @map("quiz_id")
  score             Int?
  completionPercent Int?      @map("completion_percent")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  child   ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  content Content?     @relation(fields: [contentId], references: [id])
  quiz    Quiz?        @relation(fields: [quizId], references: [id])

  @@map("progress")
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String?
  iconUrl     String?  @map("icon_url")
  createdAt   DateTime @default(now()) @map("created_at")

  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  awardedAt DateTime @default(now()) @map("awarded_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@map("user_badges")
}

model ForumThread {
  id        String   @id @default(uuid())
  title     String
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  author User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  posts  ForumPost[]

  @@map("forum_threads")
}

model ForumPost {
  id        String   @id @default(uuid())
  threadId  String   @map("thread_id")
  authorId  String   @map("author_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  thread ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("forum_posts")
}
